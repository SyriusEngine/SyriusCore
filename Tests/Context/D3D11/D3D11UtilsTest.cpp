#include "D3D11UtilsTest.hpp"
#include "../../../src/SyriusCore/Context/D3D11/D3D11Utils.hpp"

#if defined(SR_CORE_PLATFORM_WIN64)

using namespace Syrius;

void D3D11UtilsTest::SetUp() {
    Test::SetUp();
}

void D3D11UtilsTest::TearDown() {
    Test::TearDown();
}

TEST_F(D3D11UtilsTest, GetBufferType){
    EXPECT_EQ(getD3d11BufferType(SR_BUFFER_USAGE_DEFAULT), D3D11_USAGE_DEFAULT);
    EXPECT_EQ(getD3d11BufferType(SR_BUFFER_USAGE_STATIC), D3D11_USAGE_IMMUTABLE);
    EXPECT_EQ(getD3d11BufferType(SR_BUFFER_USAGE_DYNAMIC), D3D11_USAGE_DYNAMIC);
}

TEST_F(D3D11UtilsTest, GetDataType){
    EXPECT_EQ(getD3d11DataType(SR_UINT8), DXGI_FORMAT_R8_UINT);
    EXPECT_EQ(getD3d11DataType(SR_INT8), DXGI_FORMAT_R8_SINT);
    EXPECT_EQ(getD3d11DataType(SR_UINT16), DXGI_FORMAT_R16_UINT);
    EXPECT_EQ(getD3d11DataType(SR_INT16), DXGI_FORMAT_R16_SINT);
    EXPECT_EQ(getD3d11DataType(SR_UINT32), DXGI_FORMAT_R32_UINT);
    EXPECT_EQ(getD3d11DataType(SR_INT32), DXGI_FORMAT_R32_SINT);
    EXPECT_EQ(getD3d11DataType(SR_FLOAT16), DXGI_FORMAT_R16_FLOAT);
    EXPECT_EQ(getD3d11DataType(SR_FLOAT32), DXGI_FORMAT_R32_FLOAT);
}

TEST_F(D3D11UtilsTest, GetScalarType){
    EXPECT_EQ(getD3d11ScalarType(SR_UINT8_1), DXGI_FORMAT_R8_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT8_2), DXGI_FORMAT_R8G8_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT8_3), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT8_4), DXGI_FORMAT_R8G8B8A8_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT8_1), DXGI_FORMAT_R8_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT8_2), DXGI_FORMAT_R8G8_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT8_3), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11ScalarType(SR_INT8_4), DXGI_FORMAT_R8G8B8A8_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT16_1), DXGI_FORMAT_R16_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT16_2), DXGI_FORMAT_R16G16_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT16_3), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT16_4), DXGI_FORMAT_R16G16B16A16_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT16_1), DXGI_FORMAT_R16_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT16_2), DXGI_FORMAT_R16G16_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT16_3), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11ScalarType(SR_INT16_4), DXGI_FORMAT_R16G16B16A16_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT32_1), DXGI_FORMAT_R32_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT32_2), DXGI_FORMAT_R32G32_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT32_3), DXGI_FORMAT_R32G32B32_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_UINT32_4), DXGI_FORMAT_R32G32B32A32_UINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT32_1), DXGI_FORMAT_R32_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT32_2), DXGI_FORMAT_R32G32_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT32_3), DXGI_FORMAT_R32G32B32_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_INT32_4), DXGI_FORMAT_R32G32B32A32_SINT);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT16_1), DXGI_FORMAT_R16_FLOAT);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT16_2), DXGI_FORMAT_R16G16_FLOAT);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT16_3), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT16_4), DXGI_FORMAT_R16G16B16A16_FLOAT);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT32_1), DXGI_FORMAT_R32_FLOAT);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT32_2), DXGI_FORMAT_R32G32_FLOAT);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT32_3), DXGI_FORMAT_R32G32B32_FLOAT);
    EXPECT_EQ(getD3d11ScalarType(SR_FLOAT32_4), DXGI_FORMAT_R32G32B32A32_FLOAT);
}

TEST_F(D3D11UtilsTest, GetTextureFormat){
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_UI8), DXGI_FORMAT_R8_UNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_UI8), DXGI_FORMAT_R8G8_UNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_UI8), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_I8), DXGI_FORMAT_R8_SNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_I8), DXGI_FORMAT_R8G8_SNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_I8), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGBA_I8), DXGI_FORMAT_R8G8B8A8_SNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_UI16), DXGI_FORMAT_R16_UNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_UI16), DXGI_FORMAT_R16G16_UNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_UI16), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGBA_UI16), DXGI_FORMAT_R16G16B16A16_UNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_I16), DXGI_FORMAT_R16_SNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_I16), DXGI_FORMAT_R16G16_SNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_I16), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGBA_I16), DXGI_FORMAT_R16G16B16A16_SNORM);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_UI32), DXGI_FORMAT_R32_UINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_UI32), DXGI_FORMAT_R32G32_UINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_UI32), DXGI_FORMAT_R32G32B32_UINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGBA_UI32), DXGI_FORMAT_R32G32B32A32_UINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_I32), DXGI_FORMAT_R32_SINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_I32), DXGI_FORMAT_R32G32_SINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_I32), DXGI_FORMAT_R32G32B32_SINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGBA_I32), DXGI_FORMAT_R32G32B32A32_SINT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_F16), DXGI_FORMAT_R16_FLOAT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_F16), DXGI_FORMAT_R16G16_FLOAT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_F16), DXGI_FORMAT_UNKNOWN);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGBA_F16), DXGI_FORMAT_R16G16B16A16_FLOAT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_R_F32), DXGI_FORMAT_R32_FLOAT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RG_F32), DXGI_FORMAT_R32G32_FLOAT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGB_F32), DXGI_FORMAT_R32G32B32_FLOAT);
    EXPECT_EQ(getD3d11TextureFormat(SR_TEXTURE_RGBA_F32), DXGI_FORMAT_R32G32B32A32_FLOAT);
}

TEST_F(D3D11UtilsTest, GetDrawMode){
    EXPECT_EQ(getD3d11DrawMode(SR_DRAW_POINTS), D3D11_PRIMITIVE_TOPOLOGY_POINTLIST);
    EXPECT_EQ(getD3d11DrawMode(SR_DRAW_LINES), D3D11_PRIMITIVE_TOPOLOGY_LINELIST);
    EXPECT_EQ(getD3d11DrawMode(SR_DRAW_LINES_STRIP), D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP);
    EXPECT_EQ(getD3d11DrawMode(SR_DRAW_TRIANGLES), D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
    EXPECT_EQ(getD3d11DrawMode(SR_DRAW_TRIANGLE_STRIP), D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);
}

TEST_F(D3D11UtilsTest, GetTextureAddressMode){
    EXPECT_EQ(getD3d11TextureAddressMode(SR_TEXTURE_WRAP_REPEAT), D3D11_TEXTURE_ADDRESS_WRAP);
    EXPECT_EQ(getD3d11TextureAddressMode(SR_TEXTURE_WRAP_MIRROR_REPEAT), D3D11_TEXTURE_ADDRESS_MIRROR);
    EXPECT_EQ(getD3d11TextureAddressMode(SR_TEXTURE_WRAP_CLAMP_EDGE), D3D11_TEXTURE_ADDRESS_CLAMP);
    EXPECT_EQ(getD3d11TextureAddressMode(SR_TEXTURE_WRAP_CLAMP_BORDER), D3D11_TEXTURE_ADDRESS_BORDER);
}

TEST_F(D3D11UtilsTest, GetTextureFilter){
    EXPECT_EQ(getD3d11TextureFilter(SR_TEXTURE_FILTER_LINEAR, SR_TEXTURE_FILTER_LINEAR), D3D11_FILTER_MIN_MAG_MIP_LINEAR);
    EXPECT_EQ(getD3d11TextureFilter(SR_TEXTURE_FILTER_LINEAR, SR_TEXTURE_FILTER_POINT), D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR);
    EXPECT_EQ(getD3d11TextureFilter(SR_TEXTURE_FILTER_POINT, SR_TEXTURE_FILTER_LINEAR), D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT);
    EXPECT_EQ(getD3d11TextureFilter(SR_TEXTURE_FILTER_POINT, SR_TEXTURE_FILTER_POINT), D3D11_FILTER_MIN_MAG_MIP_POINT);
}

TEST_F(D3D11UtilsTest, GetComparisonFunc){
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_ALWAYS), D3D11_COMPARISON_ALWAYS);
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_NEVER), D3D11_COMPARISON_NEVER);
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_LESS), D3D11_COMPARISON_LESS);
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_LESS_EQUAL), D3D11_COMPARISON_LESS_EQUAL);
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_EQUAL), D3D11_COMPARISON_EQUAL);
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_GREATER_EQUAL), D3D11_COMPARISON_GREATER_EQUAL);
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_GREATER), D3D11_COMPARISON_GREATER);
    EXPECT_EQ(getD3d11ComparisonFunc(SR_COMPARISON_FUNC_NOT_EQUAL), D3D11_COMPARISON_NOT_EQUAL);
}

TEST_F(D3D11UtilsTest, GetStencilFunc){
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_KEEP), D3D11_STENCIL_OP_KEEP);
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_ZERO), D3D11_STENCIL_OP_ZERO);
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_REPLACE), D3D11_STENCIL_OP_REPLACE);
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_INCR), D3D11_STENCIL_OP_INCR);
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_INCR_WRAP), D3D11_STENCIL_OP_INCR_SAT);
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_DECR), D3D11_STENCIL_OP_DECR);
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_DECR_WRAP), D3D11_STENCIL_OP_DECR_SAT);
    EXPECT_EQ(getD3d11StencilFunc(SR_STENCIL_FUNC_INVERT), D3D11_STENCIL_OP_INVERT);
}

#endif
